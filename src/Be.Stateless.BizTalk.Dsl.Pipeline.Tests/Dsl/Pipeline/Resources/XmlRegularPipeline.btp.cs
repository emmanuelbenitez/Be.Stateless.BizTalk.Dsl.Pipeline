//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Be.Stateless.BizTalk.Dsl.Pipeline.Dummies
{
	
	
	public sealed class XmlRegularPipeline : Microsoft.BizTalk.PipelineOM.ReceivePipeline
	{
		
		public XmlRegularPipeline()
		{
			Microsoft.BizTalk.PipelineOM.Stage stage = this.AddStage(new System.Guid("9d0e4103-4cce-4536-83fa-4a5040674ad6"), Microsoft.BizTalk.PipelineOM.ExecutionMode.all);
			Microsoft.BizTalk.Component.Interop.IBaseComponent comp0 = Microsoft.BizTalk.PipelineOM.PipelineManager.CreateComponent("Be.Stateless.BizTalk.Component.FailedMessageRoutingEnablerComponent, Be.Stateless.BizTalk.Pipeline.Components, Version=2.0.0.0, Culture=neutral, PublicKeyToken=3707daa0b119fc14");
			if (comp0.GetType().IsInstanceOfType(typeof(Microsoft.BizTalk.Component.Interop.IPersistPropertyBag)))
			{
				((Microsoft.BizTalk.Component.Interop.IPersistPropertyBag)(comp0)).Load(new Microsoft.BizTalk.PipelineEditor.PropertyBag(new System.Collections.ArrayList(new Microsoft.BizTalk.PipelineEditor.PropertyContents[] {
									new Microsoft.BizTalk.PipelineEditor.PropertyContents("Enabled", true),
									new Microsoft.BizTalk.PipelineEditor.PropertyContents("EnableFailedMessageRouting", true),
									new Microsoft.BizTalk.PipelineEditor.PropertyContents("SuppressRoutingFailureReport", false)})), 0);
			}
			this.AddComponent(stage, comp0);
			stage = this.AddStage(new System.Guid("9d0e4105-4cce-4536-83fa-4a5040674ad6"), Microsoft.BizTalk.PipelineOM.ExecutionMode.firstRecognized);
			Microsoft.BizTalk.Component.Interop.IBaseComponent comp1 = Microsoft.BizTalk.PipelineOM.PipelineManager.CreateComponent("Microsoft.BizTalk.Component.XmlDasmComp, Microsoft.BizTalk.Pipeline.Components, Version=3.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
			if (comp1.GetType().IsInstanceOfType(typeof(Microsoft.BizTalk.Component.Interop.IPersistPropertyBag)))
			{
				((Microsoft.BizTalk.Component.Interop.IPersistPropertyBag)(comp1)).Load(new Microsoft.BizTalk.PipelineEditor.PropertyBag(new System.Collections.ArrayList(new Microsoft.BizTalk.PipelineEditor.PropertyContents[] {
									new Microsoft.BizTalk.PipelineEditor.PropertyContents("EnvelopeSpecNames", ""),
									new Microsoft.BizTalk.PipelineEditor.PropertyContents("EnvelopeSpecTargetNamespaces", ""),
									new Microsoft.BizTalk.PipelineEditor.PropertyContents("DocumentSpecNames", ""),
									new Microsoft.BizTalk.PipelineEditor.PropertyContents("DocumentSpecTargetNamespaces", ""),
									new Microsoft.BizTalk.PipelineEditor.PropertyContents("AllowUnrecognizedMessage", false),
									new Microsoft.BizTalk.PipelineEditor.PropertyContents("ValidateDocument", false),
									new Microsoft.BizTalk.PipelineEditor.PropertyContents("RecoverableInterchangeProcessing", false),
									new Microsoft.BizTalk.PipelineEditor.PropertyContents("HiddenProperties", "EnvelopeSpecTargetNamespaces,DocumentSpecTargetNamespaces"),
									new Microsoft.BizTalk.PipelineEditor.PropertyContents("DtdProcessing", "")})), 0);
			}
			this.AddComponent(stage, comp1);
		}
		
		public override string XmlContent
		{
			get
			{
				return _strPipeline;
			}
		}
		
		private const string _strPipeline = @"<?xml version='1.0' encoding='utf-16'?>
<Document xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' MajorVersion='1' MinorVersion='0'>
  <Description>XML receive regular pipeline.</Description>
  <CategoryId>f66b9f5e-43ff-4f5f-ba46-885348ae1b4e</CategoryId>
  <FriendlyName>Receive</FriendlyName>
  <Stages>
    <Stage>
      <PolicyFileStage _locAttrData='Name' _locID='1' Name='Decode' minOccurs='0' maxOccurs='-1' execMethod='All' stageId='9d0e4103-4cce-4536-83fa-4a5040674ad6' />
      <Components>
        <Component>
          <Name>Be.Stateless.BizTalk.Component.FailedMessageRoutingEnablerComponent, Be.Stateless.BizTalk.Pipeline.Components, Version=2.0.0.0, Culture=neutral, PublicKeyToken=3707daa0b119fc14</Name>
          <ComponentName>FailedMessageRoutingEnablerComponent</ComponentName>
          <Description>Enables routing of failed messages and prevents routing failure reports from being generated.</Description>
          <Version>2.0</Version>
          <Properties>
            <Property Name='Enabled'>
              <Value xsi:type='xsd:boolean'>true</Value>
            </Property>
            <Property Name='EnableFailedMessageRouting'>
              <Value xsi:type='xsd:boolean'>true</Value>
            </Property>
            <Property Name='SuppressRoutingFailureReport'>
              <Value xsi:type='xsd:boolean'>false</Value>
            </Property>
          </Properties>
          <CachedDisplayName>FailedMessageRoutingEnablerComponent</CachedDisplayName>
          <CachedIsManaged>true</CachedIsManaged>
        </Component>
      </Components>
    </Stage>
    <Stage>
      <PolicyFileStage _locAttrData='Name' _locID='2' Name='Disassemble' minOccurs='0' maxOccurs='-1' execMethod='FirstMatch' stageId='9d0e4105-4cce-4536-83fa-4a5040674ad6' />
      <Components>
        <Component>
          <Name>Microsoft.BizTalk.Component.XmlDasmComp, Microsoft.BizTalk.Pipeline.Components, Version=3.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Name>
          <ComponentName>XML disassembler</ComponentName>
          <Description>Streaming XML disassembler</Description>
          <Version>1.0</Version>
          <Properties>
            <Property Name='EnvelopeSpecNames'>
              <Value xsi:type='xsd:string' />
            </Property>
            <Property Name='EnvelopeSpecTargetNamespaces'>
              <Value xsi:type='xsd:string' />
            </Property>
            <Property Name='DocumentSpecNames'>
              <Value xsi:type='xsd:string' />
            </Property>
            <Property Name='DocumentSpecTargetNamespaces'>
              <Value xsi:type='xsd:string' />
            </Property>
            <Property Name='AllowUnrecognizedMessage'>
              <Value xsi:type='xsd:boolean'>false</Value>
            </Property>
            <Property Name='ValidateDocument'>
              <Value xsi:type='xsd:boolean'>false</Value>
            </Property>
            <Property Name='RecoverableInterchangeProcessing'>
              <Value xsi:type='xsd:boolean'>false</Value>
            </Property>
            <Property Name='HiddenProperties'>
              <Value xsi:type='xsd:string'>EnvelopeSpecTargetNamespaces,DocumentSpecTargetNamespaces</Value>
            </Property>
            <Property Name='DtdProcessing'>
              <Value xsi:type='xsd:string' />
            </Property>
          </Properties>
          <CachedDisplayName>XML disassembler</CachedDisplayName>
          <CachedIsManaged>true</CachedIsManaged>
        </Component>
      </Components>
    </Stage>
    <Stage>
      <PolicyFileStage _locAttrData='Name' _locID='3' Name='Validate' minOccurs='0' maxOccurs='-1' execMethod='All' stageId='9d0e410d-4cce-4536-83fa-4a5040674ad6' />
      <Components />
    </Stage>
    <Stage>
      <PolicyFileStage _locAttrData='Name' _locID='4' Name='ResolveParty' minOccurs='0' maxOccurs='-1' execMethod='All' stageId='9d0e410e-4cce-4536-83fa-4a5040674ad6' />
      <Components />
    </Stage>
  </Stages>
</Document>";
		
		public override System.Guid VersionDependentGuid
		{
			get
			{
				return new System.Guid(_versionDependentGuid);
			}
		}
		
		private const string _versionDependentGuid = "55a6e50d-1750-4ccd-8995-e5151b049a01";
	}
}
